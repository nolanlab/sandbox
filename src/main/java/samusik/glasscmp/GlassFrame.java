/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GlassFrame.java
 *
 * Created on 06-Oct-2009, 22:18:47
 */
package samusik.glasscmp;

import com.sun.awt.AWTUtilities;
import java.awt.Color;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.image.BufferedImage;
import javax.swing.JFrame;

/**
 *
 * @author Nikolay
 */
public class GlassFrame extends javax.swing.JFrame {

    @Override
    public void setUndecorated(boolean val) {
        if (!isDisplayable()) {
            super.setUndecorated(true);
        }
        return;
    }

    @Override
    public void setBackground(Color c) {
    }

    /** Creates new form GlassFrame */
    public GlassFrame() {
        //super.setUndecorated(true);
        initComponents();
        super.getContentPane().add(panMain, java.awt.BorderLayout.CENTER);
        //Shape s = panMain.getShape();
        //AWTUtilities.setWindowShape(this, s);
        this.addComponentListener(new ComponentAdapter() {

            @Override
            public void componentResized(ComponentEvent e) {
                Shape s = panMain.getShape(getWidth() + 1, getHeight() + 1);
                if(AWTUtilities.isTranslucencySupported(AWTUtilities.Translucency.PERPIXEL_TRANSLUCENT)){
                try{
                AWTUtilities.setWindowShape(GlassFrame.this, s);
                }catch(Exception ex){
                   // logger.showException(e);
                }
                }
                if (windowImg != null) {
                    if (scalingThread != null) {
                        scalingThread.interrupt();
                    }
                    scalingThread = new Thread() {
                        @Override
                        public void run() {
                            Dimension dim = getContentPane().getSize();
                            scaledWindowImage = windowImg.getSubimage(0, 0, Math.min(windowImg.getWidth(), dim.width), Math.min(windowImg.getHeight(), dim.height)); //.getScaledInstance(getWidth(), getHeight(), Image.SCALE_SMOOTH);
                            if(windowImg.getWidth()<dim.width || windowImg.getHeight()<dim.height){
                                scaledWindowImage = scaledWindowImage.getScaledInstance(dim.width, dim.height, Image.SCALE_SMOOTH);
                            }
                        }
                    };
                    scalingThread.start();
                }
            }
        });
        super.setBounds(Math.max(this.getBounds().x, 10), Math.max(this.getBounds().y, 10), Math.max(this.getBounds().width, 500), Math.max(this.getBounds().height, 300));
        this.createBufferStrategy(2);
    }
    
    
    private Thread scalingThread = new Thread() {

        @Override
        public void run() {
            scaledWindowImage = windowImg.getScaledInstance(getWidth(), getHeight(), Image.SCALE_FAST);
        }
    };
   
    @Override
    public Container getContentPane() {
        return jPanel1;
    }

    @Override
    public void setContentPane(Container contentPane) {
        return;
    }

    @Override
    public void paintAll(Graphics g) {
        
         super.paintAll(g);
    }

    Image scaledWindowImage = null;


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblClose1 = new javax.swing.JLabel();
        lblMinimize1 = new javax.swing.JLabel();
        panMain = new samusik.glasscmp.GlassPanel();
        lblMinimize = new javax.swing.JLabel();
        lblClose = new javax.swing.JLabel();
        S = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                //System.err.println("paintComponent");
                if(!isResizing){
                    doLayout();
                    super.paintComponent(g);
                }
            }
            public void doLayout(){
                // System.err.println("doLayout");
                if(!isResizing)super.doLayout();
            }

            public void validate(){
                if(!isResizing)super.validate();
            }

            public void paint(Graphics g){
                //System.err.println("paint");
                if(!isResizing){
                    super.doLayout();
                    super.paint(g);
                }else{
                    if (scaledWindowImage != null) {
                        g.drawImage(scaledWindowImage, 0, 0, null);
                    }
                }
            }

            public void paintImmediately(Rectangle r){
                //System.err.println("paintImmediatelyRect");
                super.paintImmediately(r);
            }

            public void paintImmediately(int x, int y, int width, int height){
                //System.err.println("paintImmediately");
                super.paintImmediately(x, y, width, height);
            }

            public void paintAll(Graphics g){
                //System.err.println("paintAll");
                if(!isResizing)super.paintAll(g);
            }

            public void paintComponents(Graphics g){
                //System.err.println("paintComponents");
                super.paintComponents(g);
            }

        };
        SE = new javax.swing.JPanel();
        NE = new javax.swing.JPanel();
        NW = new javax.swing.JPanel();
        W = new javax.swing.JPanel();
        E = new javax.swing.JPanel();
        SW = new javax.swing.JPanel();
        N = new javax.swing.JPanel();
        jLabel3 =  new javax.swing.JLabel(){
            @Override
            public void paintComponent(Graphics g){
                this.setBackground(new Color(0,0,0,0));
                Graphics2D g2 = (Graphics2D)g;
                g2.setPaint(new Color(20,20,70,20));
                g2.drawString(this.getText(), +1, this.getHeight()-1);
                g2.setPaint(new Color(20,20,70,200));
                g2.drawString(this.getText(), 0,  this.getHeight()-2);
            }
        }
        ;

        lblClose1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/btnClose.png"))); // NOI18N
        lblClose1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblClose1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblClose1MouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lblClose1MouseReleased(evt);
            }
        });

        lblMinimize1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/btnMinimize.png"))); // NOI18N
        lblMinimize1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblMinimize1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblMinimize1MouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lblMinimize1MouseReleased(evt);
            }
        });

        setTitle("Find");
        setForeground(java.awt.Color.white);
        setMinimumSize(new java.awt.Dimension(100, 100));
        setUndecorated(true);

        panMain.setMaximumSize(new java.awt.Dimension(5000, 10));
        panMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panMainMousePressed(evt);
            }
        });
        panMain.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panMainMouseDragged(evt);
            }
        });
        panMain.setLayout(new java.awt.GridBagLayout());

        lblMinimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/btnMinimize.png"))); // NOI18N
        lblMinimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblMinimizeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblMinimizeMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lblMinimizeMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        panMain.add(lblMinimize, gridBagConstraints);

        lblClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/btnClose.png"))); // NOI18N
        lblClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblCloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblCloseMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lblCloseMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        panMain.add(lblClose, gridBagConstraints);

        S.setBackground(new Color(0,0,0,0));
        S.setMaximumSize(new java.awt.Dimension(5000, 5000));
        S.setMinimumSize(new java.awt.Dimension(1, 1));
        S.setOpaque(false);
        S.setPreferredSize(new java.awt.Dimension(1, 1));
        S.setCursor(Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR));
        S.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                SMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SMouseReleased(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SMouseEntered(evt);
            }
        });
        S.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                SMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout SLayout = new javax.swing.GroupLayout(S);
        S.setLayout(SLayout);
        SLayout.setHorizontalGroup(
            SLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 827, Short.MAX_VALUE)
        );
        SLayout.setVerticalGroup(
            SLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 11, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        panMain.add(S, gridBagConstraints);

        jPanel1.setBackground(GlassPanel.BG_COLOR);
        jPanel1.setForeground(new java.awt.Color(255, 0, 51));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel1MouseEntered(evt);
            }
        });
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 827, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 414, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panMain.add(jPanel1, gridBagConstraints);

        SE.setBackground(new Color(0,0,0,0));
        SE.setMaximumSize(null);
        SE.setOpaque(false);
        SE.setPreferredSize(new java.awt.Dimension(0, 0));
        SE.setRequestFocusEnabled(false);
        SE.setCursor(Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR));
        SE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                SEMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SEMouseReleased(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SEMouseEntered(evt);
            }
        });
        SE.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                SEMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout SELayout = new javax.swing.GroupLayout(SE);
        SE.setLayout(SELayout);
        SELayout.setHorizontalGroup(
            SELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );
        SELayout.setVerticalGroup(
            SELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        panMain.add(SE, gridBagConstraints);

        NE.setBackground(new Color(0,0,0,0));
        NE.setMaximumSize(new java.awt.Dimension(5000, 5000));
        NE.setMinimumSize(new java.awt.Dimension(1, 1));
        NE.setOpaque(false);
        NE.setPreferredSize(new java.awt.Dimension(1, 1));
        NE.setCursor(Cursor.getPredefinedCursor(Cursor.NE_RESIZE_CURSOR));
        NE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                NEMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                NEMouseReleased(evt);
            }
        });
        NE.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                NEMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout NELayout = new javax.swing.GroupLayout(NE);
        NE.setLayout(NELayout);
        NELayout.setHorizontalGroup(
            NELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        NELayout.setVerticalGroup(
            NELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 11, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        panMain.add(NE, gridBagConstraints);

        NW.setBackground(new Color(0,0,0,0));
        NW.setMaximumSize(new java.awt.Dimension(5000, 5000));
        NW.setMinimumSize(new java.awt.Dimension(1, 1));
        NW.setOpaque(false);
        NW.setPreferredSize(new java.awt.Dimension(1, 1));
        NW.setCursor(Cursor.getPredefinedCursor(Cursor.NW_RESIZE_CURSOR));
        NW.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                NWMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                NWMouseReleased(evt);
            }
        });
        NW.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                NWMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout NWLayout = new javax.swing.GroupLayout(NW);
        NW.setLayout(NWLayout);
        NWLayout.setHorizontalGroup(
            NWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        NWLayout.setVerticalGroup(
            NWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 11, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panMain.add(NW, gridBagConstraints);

        W.setBackground(new Color(0,0,0,0));
        W.setMaximumSize(new java.awt.Dimension(5000, 5000));
        W.setMinimumSize(new java.awt.Dimension(1, 1));
        W.setOpaque(false);
        W.setPreferredSize(new java.awt.Dimension(1, 1));
        W.setCursor(Cursor.getPredefinedCursor(Cursor.W_RESIZE_CURSOR));
        W.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                WMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                WMouseReleased(evt);
            }
        });
        W.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                WMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout WLayout = new javax.swing.GroupLayout(W);
        W.setLayout(WLayout);
        WLayout.setHorizontalGroup(
            WLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 11, Short.MAX_VALUE)
        );
        WLayout.setVerticalGroup(
            WLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 414, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panMain.add(W, gridBagConstraints);

        E.setBackground(new Color(0,0,0,0));
        E.setMaximumSize(new java.awt.Dimension(5000, 5000));
        E.setMinimumSize(new java.awt.Dimension(1, 1));
        E.setOpaque(false);
        E.setPreferredSize(new java.awt.Dimension(1, 1));
        E.setCursor(Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR));
        E.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                EMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                EMouseReleased(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                EMouseEntered(evt);
            }
        });
        E.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                EMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout ELayout = new javax.swing.GroupLayout(E);
        E.setLayout(ELayout);
        ELayout.setHorizontalGroup(
            ELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 11, Short.MAX_VALUE)
        );
        ELayout.setVerticalGroup(
            ELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 414, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panMain.add(E, gridBagConstraints);

        SW.setMaximumSize(new java.awt.Dimension(5000, 5000));
        SW.setMinimumSize(new java.awt.Dimension(1, 1));
        SW.setOpaque(false);
        SW.setPreferredSize(new java.awt.Dimension(1, 1));
        SW.setCursor(Cursor.getPredefinedCursor(Cursor.SW_RESIZE_CURSOR));
        SW.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                SWMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SWMouseReleased(evt);
            }
        });
        SW.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                SWMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout SWLayout = new javax.swing.GroupLayout(SW);
        SW.setLayout(SWLayout);
        SWLayout.setHorizontalGroup(
            SWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 9, Short.MAX_VALUE)
        );
        SWLayout.setVerticalGroup(
            SWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 9, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        panMain.add(SW, gridBagConstraints);

        N.setBackground(new Color(0,0,0,0));
        N.setMaximumSize(new java.awt.Dimension(5000, 5000));
        N.setMinimumSize(new java.awt.Dimension(1, 1));
        N.setCursor(Cursor.getPredefinedCursor(Cursor.N_RESIZE_CURSOR));
        N.setOpaque(false);
        N.setPreferredSize(new java.awt.Dimension(1, 1));
        N.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                NMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                NMouseReleased(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                NMouseEntered(evt);
            }
        });
        N.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                NMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout NLayout = new javax.swing.GroupLayout(N);
        N.setLayout(NLayout);
        NLayout.setHorizontalGroup(
            NLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 761, Short.MAX_VALUE)
        );
        NLayout.setVerticalGroup(
            NLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        panMain.add(N, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(50,50,70,127));
        jLabel3.setMaximumSize(new java.awt.Dimension(900, 18));
        jLabel3.setMinimumSize(new java.awt.Dimension(25, 18));
        jLabel3.setPreferredSize(new java.awt.Dimension(900, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panMain.add(jLabel3, gridBagConstraints);

        if(false)

        getContentPane().add(panMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void panMainMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panMainMouseDragged
        Point currLoc = evt.getLocationOnScreen();
        if(initLoc!=null){
            this.setLocation((int) (initLoc.getX() + (currLoc.getX() - initDrag.getX())), (int) (initLoc.getY() + (currLoc.getY() - initDrag.getY())));
        }else{
            panMainMousePressed(evt);
        }
}//GEN-LAST:event_panMainMouseDragged

    private void panMainMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panMainMousePressed
        initLoc = this.getLocation();
        initDrag = evt.getLocationOnScreen();
}//GEN-LAST:event_panMainMousePressed

    private void NMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NMouseDragged
        min = this.getMinimumSize();
        max = this.getMaximumSize();
        int newheight = Math.min(max.height, Math.max(winInitSize.height - (evt.getYOnScreen() - dragInitPoint.y), min.height));
        int newy = Math.max(Math.min(winInitPoint.y + (evt.getYOnScreen() - dragInitPoint.y), winInitPoint.y + (winInitSize.height - min.height)), winInitPoint.y + (winInitSize.height - max.height));
        Rectangle r = new Rectangle(winInitPoint.x, newy, winInitSize.width, newheight);
        this.setBounds(r);
}//GEN-LAST:event_NMouseDragged

    private void NMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NMousePressed
        initializeWindowDrag(evt);
    }//GEN-LAST:event_NMousePressed

    private void NMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NMouseEntered
        // TODO add your handling code here:
}//GEN-LAST:event_NMouseEntered

    private void SWMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SWMouseDragged
        min = this.getMinimumSize();
        max = this.getMaximumSize();
        int newx = Math.max(winInitPoint.x + (winInitSize.width - max.width), Math.min(winInitPoint.x + (evt.getXOnScreen() - dragInitPoint.x), winInitPoint.x + (winInitSize.width - min.width)));
        int newheight = Math.min(max.height, Math.min(winInitSize.height + (evt.getYOnScreen() - dragInitPoint.y), max.height));
        int newwid = Math.min(max.width, Math.max(winInitSize.width - (evt.getXOnScreen() - dragInitPoint.x), min.width));
        this.setBounds(newx, winInitPoint.y, newwid, newheight);
}//GEN-LAST:event_SWMouseDragged

    private void SWMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SWMousePressed
        initializeWindowDrag(evt);
}//GEN-LAST:event_SWMousePressed
    private Dimension min;
    private Dimension max;
    private void EMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EMouseDragged
        min = this.getMinimumSize();
        max = this.getMaximumSize();
        int newwid = Math.min(max.width, Math.max(winInitSize.width + (evt.getXOnScreen() - dragInitPoint.x), min.width));
        this.setSize(newwid, winInitSize.height);
}//GEN-LAST:event_EMouseDragged

    private void EMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EMousePressed
        initializeWindowDrag(evt);
}//GEN-LAST:event_EMousePressed

    private void EMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EMouseEntered
}//GEN-LAST:event_EMouseEntered

    private void WMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WMouseDragged
        min = this.getMinimumSize();
        max = this.getMaximumSize();
        int newx = Math.max(winInitPoint.x + (winInitSize.width - max.width), Math.min(winInitPoint.x + (evt.getXOnScreen() - dragInitPoint.x), winInitPoint.x + (winInitSize.width - min.width)));
        int newwid = Math.min(max.width, Math.max(winInitSize.width - (evt.getXOnScreen() - dragInitPoint.x), min.width));
        this.setBounds(newx, winInitPoint.y, newwid, winInitSize.height);
}//GEN-LAST:event_WMouseDragged

    private void WMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WMousePressed
        initializeWindowDrag(evt);
}//GEN-LAST:event_WMousePressed

    private void NWMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NWMouseDragged
        min = this.getMinimumSize();
        max = this.getMaximumSize();
        int newx = Math.max(winInitPoint.x + (winInitSize.width - max.width), Math.min(winInitPoint.x + (evt.getXOnScreen() - dragInitPoint.x), winInitPoint.x + (winInitSize.width - min.width)));
        int newy = Math.max(Math.min(winInitPoint.y + (evt.getYOnScreen() - dragInitPoint.y), winInitPoint.y + (winInitSize.height - min.height)), winInitPoint.y + (winInitSize.height - max.height));
        int newwid = Math.min(max.width, Math.max(winInitSize.width - (evt.getXOnScreen() - dragInitPoint.x), min.width));
        int newheight = Math.min(max.height, Math.max(winInitSize.height - (evt.getYOnScreen() - dragInitPoint.y), min.height));
        this.setBounds(newx, newy, newwid, newheight);
}//GEN-LAST:event_NWMouseDragged

    private void NWMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NWMousePressed
        initializeWindowDrag(evt);
}//GEN-LAST:event_NWMousePressed

    private void NEMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NEMouseDragged
        min = this.getMinimumSize();
        max = this.getMaximumSize();
        int newheight = Math.min(max.height, Math.max(winInitSize.height - (evt.getYOnScreen() - dragInitPoint.y), min.height));
        int newy = Math.max(Math.min(winInitPoint.y + (evt.getYOnScreen() - dragInitPoint.y), winInitPoint.y + (winInitSize.height - min.height)), winInitPoint.y + (winInitSize.height - max.height));
        int newwid = Math.min(max.width, Math.max(winInitSize.width + (evt.getXOnScreen() - dragInitPoint.x), min.width));
        Rectangle r = new Rectangle(winInitPoint.x, newy, newwid, newheight);
        this.setBounds(r);
}//GEN-LAST:event_NEMouseDragged

    private void NEMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NEMousePressed
        initializeWindowDrag(evt);
}//GEN-LAST:event_NEMousePressed

    private void SEMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SEMouseDragged
        min = this.getMinimumSize();
        max = this.getMaximumSize();
        int newwid = Math.min(max.width, Math.max(winInitSize.width + (evt.getXOnScreen() - dragInitPoint.x), min.width));
        int newheight = Math.min(max.height, Math.min(winInitSize.height + (evt.getYOnScreen() - dragInitPoint.y), max.height));
        this.setSize(newwid, newheight);
}//GEN-LAST:event_SEMouseDragged

    private void SEMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SEMousePressed
        initializeWindowDrag(evt);
}//GEN-LAST:event_SEMousePressed

    private void SEMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SEMouseEntered
}//GEN-LAST:event_SEMouseEntered

    private void SMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SMouseDragged
        min = this.getMinimumSize();
        max = this.getMaximumSize();
        int newheight = Math.min(max.height, Math.min(winInitSize.height + (evt.getYOnScreen() - dragInitPoint.y), max.height));
        this.setSize(winInitSize.width, newheight);
}//GEN-LAST:event_SMouseDragged

    private void SMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SMousePressed
        initializeWindowDrag(evt);
}//GEN-LAST:event_SMousePressed

    private void SMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SMouseEntered
}//GEN-LAST:event_SMouseEntered

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
}//GEN-LAST:event_jPanel1MouseDragged

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
}//GEN-LAST:event_jPanel1MousePressed

    private void jPanel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseEntered
        // TODO add your handling code here:
}//GEN-LAST:event_jPanel1MouseEntered

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
}//GEN-LAST:event_jPanel1MouseClicked

    private void lblCloseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseReleased
        if (this.getDefaultCloseOperation() == JFrame.EXIT_ON_CLOSE) {
            System.exit(0);
        } 
        if (this.getDefaultCloseOperation() == JFrame.DISPOSE_ON_CLOSE) {
            this.dispose();
        }
        if (this.getDefaultCloseOperation() == JFrame.HIDE_ON_CLOSE) {
        this.setVisible(false);
        }
        
        
}//GEN-LAST:event_lblCloseMouseReleased

    private void lblCloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseExited
        lblClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/btnClose.png")));
        lblClose.repaint();
}//GEN-LAST:event_lblCloseMouseExited

    private void lblCloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseEntered
        lblClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/btnCloseHL.png")));
        lblClose.repaint();
}//GEN-LAST:event_lblCloseMouseEntered

    private void lblMinimizeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblMinimizeMouseExited
        lblMinimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/btnMinimize.png")));
        lblMinimize.repaint();
}//GEN-LAST:event_lblMinimizeMouseExited

    private void lblMinimizeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblMinimizeMouseEntered
        lblMinimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/btnMinimizeHL.png")));
        lblMinimize.repaint();
}//GEN-LAST:event_lblMinimizeMouseEntered

    private void lblMinimizeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblMinimizeMouseReleased
        this.setExtendedState(JFrame.ICONIFIED);
    }//GEN-LAST:event_lblMinimizeMouseReleased

    private void SEMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SEMouseReleased
        windowResizeComplete();
    }//GEN-LAST:event_SEMouseReleased

    private void SMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SMouseReleased
        windowResizeComplete();
    }//GEN-LAST:event_SMouseReleased

    private void SWMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SWMouseReleased
        windowResizeComplete();
    }//GEN-LAST:event_SWMouseReleased

    private void WMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WMouseReleased
        windowResizeComplete();
    }//GEN-LAST:event_WMouseReleased

    private void NWMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NWMouseReleased
        windowResizeComplete();
    }//GEN-LAST:event_NWMouseReleased

    private void NMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NMouseReleased
        windowResizeComplete();
    }//GEN-LAST:event_NMouseReleased

    private void NEMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NEMouseReleased
        windowResizeComplete();
    }//GEN-LAST:event_NEMouseReleased

    private void EMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EMouseReleased
        windowResizeComplete();
    }//GEN-LAST:event_EMouseReleased

    private void lblClose1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblClose1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_lblClose1MouseEntered

    private void lblClose1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblClose1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_lblClose1MouseExited

    private void lblClose1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblClose1MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_lblClose1MouseReleased

    private void lblMinimize1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblMinimize1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_lblMinimize1MouseEntered

    private void lblMinimize1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblMinimize1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_lblMinimize1MouseExited

    private void lblMinimize1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblMinimize1MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_lblMinimize1MouseReleased
    private Point initLoc;
    private Point initDrag;
    private Dimension winInitSize;
    private Point winInitPoint;
    private Point dragInitPoint;
    boolean isResizing = false;

    private void windowResizeComplete() {
        isResizing = false;
        this.getContentPane().invalidate();
        jPanel1.validate();
    }
    BufferedImage windowImg = null;

    private void initializeWindowDrag(java.awt.event.MouseEvent evt) {
        winInitSize = this.getSize();
        winInitPoint = this.getLocationOnScreen();
        dragInitPoint = evt.getLocationOnScreen();
        windowImg = new BufferedImage(this.getContentPane().getWidth(), this.getContentPane().getHeight(), BufferedImage.TYPE_INT_RGB);
        this.getContentPane().paintAll(windowImg.createGraphics());
        isResizing = true;
    }

    @Override
    public void setTitle(String title) {
        super.setTitle(title);
        jLabel3.setText(title);
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel E;
    private javax.swing.JPanel N;
    private javax.swing.JPanel NE;
    private javax.swing.JPanel NW;
    private javax.swing.JPanel S;
    private javax.swing.JPanel SE;
    private javax.swing.JPanel SW;
    private javax.swing.JPanel W;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblClose;
    private javax.swing.JLabel lblClose1;
    private javax.swing.JLabel lblMinimize;
    private javax.swing.JLabel lblMinimize1;
    private samusik.glasscmp.GlassPanel panMain;
    // End of variables declaration//GEN-END:variables
}
