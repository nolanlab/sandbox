/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Nikolay
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * cGlassFrame.java
 *
 * Created on 06-Oct-2009, 22:18:47
 */
package samusik.glasscmp;

import com.sun.awt.AWTUtilities;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.MenuComponent;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;

/**
 *
 * @author Nikolay
 */
public class GlassDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 10L;
    private Point initLoc;
    private Point initDrag;
    private Dimension winInitSize = new Dimension(getWidth(), getHeight());
    private Point winInitPoint = new Point(0, 0);
    private Point dragInitPoint;

    @Override
    public void setUndecorated(boolean val) {
        if (!isDisplayable()) {
            super.setUndecorated(true);
        }
        return;
    }

    public GlassDialog(Frame parent, boolean modal) {
        super(parent, modal);
    }

    @Override
    public void setBackground(Color c) {
        return;
    }

    /** Creates new form cGlassFrame */
    @Override
    public void setBounds(Rectangle r) {
        if (r == null) {
            return;
        }
        super.setBounds(r);
    }

    @Override
    public void setBounds(int x, int y, int width, int height) {
        super.setBounds(x, y, width, height);
    }

    @Override
    public void setSize(Dimension d) {
        super.setSize(d);
    }

    @Override
    public void setSize(int width, int height) {
        super.setSize(width, height);
    }

    @Override
    public Container getContentPane() {
        return panMain;
    }

    @Override
    public void setContentPane(Container contentPane) {
        return;
    }

    @Override
    protected void dialogInit() {
        super.dialogInit();
        this.setUndecorated(true);
        initComponents();
        super.getContentPane().add(panBackground, java.awt.BorderLayout.CENTER);
        this.addComponentListener(new ComponentAdapter() {

            @Override
            public void componentResized(ComponentEvent e) {
                Shape s = panBackground.getShape(getWidth(), getHeight());
                if (AWTUtilities.isTranslucencySupported(AWTUtilities.Translucency.PERPIXEL_TRANSLUCENT)) {
                    try {
                        AWTUtilities.setWindowShape(GlassDialog.this, s);
                    } catch (Exception ex) {
                        // logger.showException(e);
                    }
                }

            }
        });
    }

    @Override
    public JLayeredPane getLayeredPane() {
        return super.getLayeredPane();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panBackground = new samusik.glasscmp.GlassPanel();
        jLabel2 = new javax.swing.JLabel();
        panMain = new javax.swing.JPanel() {

            public String toString() {
                return "cGlassDialog's content pane";
            }

            @Override
            public void remove(Component comp) {
                //Thread.currentThread().dumpStack();
                super.remove(comp);

            }

            @Override
            public synchronized void remove(MenuComponent popup) {
                //Thread.currentThread().dumpStack();
                super.remove(popup);

            }

            @Override
            public void removeAll() {
                // Thread.currentThread().dumpStack();
                super.removeAll();

            }

            @Override
            public void remove(int index) {
                // Thread.currentThread().dumpStack();
                super.remove(index);

            }
        };
        S = new javax.swing.JPanel();
        SE = new javax.swing.JPanel();
        NE = new javax.swing.JPanel();
        NW = new javax.swing.JPanel();
        W = new javax.swing.JPanel();
        E = new javax.swing.JPanel();
        SW = new javax.swing.JPanel();
        N = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel() {

            @Override
            public void paintComponent(Graphics g) {
                this.setBackground(opaqueColor);
                Graphics2D g2 = (Graphics2D) g;
                g2.setPaint(new Color(20, 20, 70, 20));
                g2.drawString(this.getText(), +1, this.getHeight() - 1);
                g2.setPaint(new Color(20, 20, 70, 200));
                g2.drawString(this.getText(), 0, this.getHeight() - 2);
            }
        };

        setTitle("Find");
        setBounds(null);
        setForeground(java.awt.Color.white);
        setMinimumSize(new java.awt.Dimension(200, 200));
        setUndecorated(true);

        panBackground.setMaximumSize(new java.awt.Dimension(5000, 5000));
        panBackground.setMinimumSize(new java.awt.Dimension(175, 43));



        panBackground.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                cGlassPanel10MousePressed(evt);
            }
        });
        panBackground.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            public void mouseDragged(java.awt.event.MouseEvent evt) {
                cGlassPanel10MouseDragged(evt);
            }
        });
        panBackground.setLayout(new java.awt.GridBagLayout());

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/btnCloseDlg.png"))); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel2MouseEntered(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel2MouseExited(evt);
            }

            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel2MouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 7);
        panBackground.add(jLabel2, gridBagConstraints);

        panMain.setBackground(GlassPanel.BG_COLOR);

        panBackground.setBackground(opaqueColor);

        panMain.setMinimumSize(new java.awt.Dimension(10, 10));
        panMain.setPreferredSize(new java.awt.Dimension(500, 500));
        panMain.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panMainMouseClicked(evt);
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                panMainMouseEntered(evt);
            }

            public void mousePressed(java.awt.event.MouseEvent evt) {
                panMainMousePressed(evt);
            }
        });
        panMain.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panMainMouseDragged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 3, 4);
        panBackground.add(panMain, gridBagConstraints);

        S.setBackground(opaqueColor);
        S.setMaximumSize(new java.awt.Dimension(2000, 10));
        S.setMinimumSize(new java.awt.Dimension(5, 5));
        S.setOpaque(false);
        S.setPreferredSize(new java.awt.Dimension(5, 5));
        S.setCursor(Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR));
        S.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SMouseEntered(evt);
            }

            public void mousePressed(java.awt.event.MouseEvent evt) {
                SMousePressed(evt);
            }
        });
        S.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            public void mouseDragged(java.awt.event.MouseEvent evt) {
                SMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout SLayout = new javax.swing.GroupLayout(S);
        S.setLayout(SLayout);
        SLayout.setHorizontalGroup(
                SLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 489, Short.MAX_VALUE));
        SLayout.setVerticalGroup(
                SLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 5, Short.MAX_VALUE));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        panBackground.add(S, gridBagConstraints);

        SE.setBackground(opaqueColor);
        SE.setMaximumSize(new java.awt.Dimension(10, 10));
        SE.setMinimumSize(new java.awt.Dimension(7, 7));
        SE.setOpaque(false);
        SE.setPreferredSize(new java.awt.Dimension(7, 7));
        SE.setRequestFocusEnabled(false);
        SE.setCursor(Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR));
        SE.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SEMouseEntered(evt);
            }

            public void mousePressed(java.awt.event.MouseEvent evt) {
                SEMousePressed(evt);
            }
        });
        SE.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            public void mouseDragged(java.awt.event.MouseEvent evt) {
                SEMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout SELayout = new javax.swing.GroupLayout(SE);
        SE.setLayout(SELayout);
        SELayout.setHorizontalGroup(
                SELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 7, Short.MAX_VALUE));
        SELayout.setVerticalGroup(
                SELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 7, Short.MAX_VALUE));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        panBackground.add(SE, gridBagConstraints);

        NE.setBackground(opaqueColor);
        NE.setMinimumSize(new java.awt.Dimension(7, 7));
        NE.setOpaque(false);
        NE.setPreferredSize(new java.awt.Dimension(7, 7));
        NE.setCursor(Cursor.getPredefinedCursor(Cursor.NE_RESIZE_CURSOR));
        NE.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                NEMousePressed(evt);
            }
        });
        NE.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            public void mouseDragged(java.awt.event.MouseEvent evt) {
                NEMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout NELayout = new javax.swing.GroupLayout(NE);
        NE.setLayout(NELayout);
        NELayout.setHorizontalGroup(
                NELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 7, Short.MAX_VALUE));
        NELayout.setVerticalGroup(
                NELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 7, Short.MAX_VALUE));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 2);
        panBackground.add(NE, gridBagConstraints);

        NW.setBackground(opaqueColor);
        NW.setMinimumSize(new java.awt.Dimension(7, 7));
        NW.setOpaque(false);
        NW.setPreferredSize(new java.awt.Dimension(7, 7));
        NW.setCursor(Cursor.getPredefinedCursor(Cursor.NW_RESIZE_CURSOR));
        NW.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                NWMousePressed(evt);
            }
        });
        NW.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            public void mouseDragged(java.awt.event.MouseEvent evt) {
                NWMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout NWLayout = new javax.swing.GroupLayout(NW);
        NW.setLayout(NWLayout);
        NWLayout.setHorizontalGroup(
                NWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 7, Short.MAX_VALUE));
        NWLayout.setVerticalGroup(
                NWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 7, Short.MAX_VALUE));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        panBackground.add(NW, gridBagConstraints);

        W.setBackground(opaqueColor);
        W.setMinimumSize(new java.awt.Dimension(5, 5));
        W.setOpaque(false);
        W.setPreferredSize(new java.awt.Dimension(5, 5));
        W.setCursor(Cursor.getPredefinedCursor(Cursor.W_RESIZE_CURSOR));
        W.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                WMousePressed(evt);
            }
        });
        W.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            public void mouseDragged(java.awt.event.MouseEvent evt) {
                WMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout WLayout = new javax.swing.GroupLayout(W);
        W.setLayout(WLayout);
        WLayout.setHorizontalGroup(
                WLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 5, Short.MAX_VALUE));
        WLayout.setVerticalGroup(
                WLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 309, Short.MAX_VALUE));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(7, 1, 0, 0);
        panBackground.add(W, gridBagConstraints);

        E.setBackground(opaqueColor);
        E.setMaximumSize(new java.awt.Dimension(10, 2000));
        E.setMinimumSize(new java.awt.Dimension(5, 5));
        E.setOpaque(false);
        E.setPreferredSize(new java.awt.Dimension(5, 5));
        E.setCursor(Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR));
        E.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                EMouseEntered(evt);
            }

            public void mousePressed(java.awt.event.MouseEvent evt) {
                EMousePressed(evt);
            }
        });
        E.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            public void mouseDragged(java.awt.event.MouseEvent evt) {
                EMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout ELayout = new javax.swing.GroupLayout(E);
        E.setLayout(ELayout);
        ELayout.setHorizontalGroup(
                ELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 5, Short.MAX_VALUE));
        ELayout.setVerticalGroup(
                ELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 309, Short.MAX_VALUE));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 2);
        panBackground.add(E, gridBagConstraints);

        SW.setMinimumSize(new java.awt.Dimension(7, 7));
        SW.setOpaque(false);
        SW.setPreferredSize(new java.awt.Dimension(7, 7));
        SW.setCursor(Cursor.getPredefinedCursor(Cursor.SW_RESIZE_CURSOR));
        SW.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                SWMousePressed(evt);
            }
        });
        SW.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            public void mouseDragged(java.awt.event.MouseEvent evt) {
                SWMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout SWLayout = new javax.swing.GroupLayout(SW);
        SW.setLayout(SWLayout);
        SWLayout.setHorizontalGroup(
                SWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 7, Short.MAX_VALUE));
        SWLayout.setVerticalGroup(
                SWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 7, Short.MAX_VALUE));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        panBackground.add(SW, gridBagConstraints);

        N.setBackground(opaqueColor);
        N.setMinimumSize(new java.awt.Dimension(5, 5));
        N.setCursor(Cursor.getPredefinedCursor(Cursor.N_RESIZE_CURSOR));
        N.setOpaque(false);
        N.setPreferredSize(new java.awt.Dimension(5, 5));
        N.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                NMouseEntered(evt);
            }

            public void mousePressed(java.awt.event.MouseEvent evt) {
                NMousePressed(evt);
            }
        });
        N.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            public void mouseDragged(java.awt.event.MouseEvent evt) {
                NMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout NLayout = new javax.swing.GroupLayout(N);
        N.setLayout(NLayout);
        NLayout.setHorizontalGroup(
                NLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 440, Short.MAX_VALUE));
        NLayout.setVerticalGroup(
                NLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 5, Short.MAX_VALUE));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        panBackground.add(N, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(50, 50, 70, 127));
        jLabel3.setMaximumSize(new java.awt.Dimension(25, 18));
        jLabel3.setMinimumSize(new java.awt.Dimension(25, 18));
        jLabel3.setPreferredSize(new java.awt.Dimension(25, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 0, 0);
        panBackground.add(jLabel3, gridBagConstraints);

        //if(false)

        //getContentPane().add(cGlassPanel10, java.awt.BorderLayout.CENTER);

        panBackground.setDoubleBuffered(true);
        panMain.setDoubleBuffered(true);

        panMain.setOpaque(true);

        pack();
    }// </editor-fold>
    private static final Color opaqueColor = new Color(0, 0, 0, 0);

    @Override
    public Color getBackground() {
        return opaqueColor;
    }

    private void cGlassPanel10MouseDragged(java.awt.event.MouseEvent evt) {
        Point currLoc = evt.getLocationOnScreen();
        if (initLoc != null && initDrag != null) {
            this.setLocation((int) (initLoc.getX() + (currLoc.getX() - initDrag.getX())), (int) (initLoc.getY() + (currLoc.getY() - initDrag.getY())));
        }
    }

    private void cGlassPanel10MousePressed(java.awt.event.MouseEvent evt) {
        initLoc = this.getLocation();
        initDrag = evt.getLocationOnScreen();
    }

    private void NMouseDragged(java.awt.event.MouseEvent evt) {
        min = this.getMinimumSize();
        max = this.getMaximumSize();
        int newheight = Math.min(max.height, Math.max(winInitSize.height - (evt.getYOnScreen() - dragInitPoint.y), min.height));
        int newy = Math.max(Math.min(winInitPoint.y + (evt.getYOnScreen() - dragInitPoint.y), winInitPoint.y + (winInitSize.height - min.height)), winInitPoint.y + (winInitSize.height - max.height));
        Rectangle r = new Rectangle(winInitPoint.x, newy, winInitSize.width, newheight);
        this.setBounds(r);
    }

    private void NMousePressed(java.awt.event.MouseEvent evt) {
        initializeWindowDrag(evt);
    }

    private void NMouseEntered(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void SWMouseDragged(java.awt.event.MouseEvent evt) {
        min = this.getMinimumSize();
        max = this.getMaximumSize();
        int newx = Math.max(winInitPoint.x + (winInitSize.width - max.width), Math.min(winInitPoint.x + (evt.getXOnScreen() - dragInitPoint.x), winInitPoint.x + (winInitSize.width - min.width)));
        int newheight = Math.min(max.height, Math.min(winInitSize.height + (evt.getYOnScreen() - dragInitPoint.y), max.height));
        int newwid = Math.min(max.width, Math.max(winInitSize.width - (evt.getXOnScreen() - dragInitPoint.x), min.width));
        this.setBounds(newx, winInitPoint.y, newwid, newheight);
    }

    private void SWMousePressed(java.awt.event.MouseEvent evt) {
        initializeWindowDrag(evt);
    }
    private Dimension min;
    private Dimension max;

    private void EMouseDragged(java.awt.event.MouseEvent evt) {
        if (evt == null || winInitSize == null || dragInitPoint == null) {
            return;
        }
        min = this.getMinimumSize();
        max = this.getMaximumSize();
        int newwid = Math.min(max.width, Math.max(winInitSize.width + (evt.getXOnScreen() - dragInitPoint.x), min.width));
        this.setSize(newwid, winInitSize.height);

    }

    private void EMousePressed(java.awt.event.MouseEvent evt) {
        initializeWindowDrag(evt);
    }

    private void EMouseEntered(java.awt.event.MouseEvent evt) {
    }

    private void WMouseDragged(java.awt.event.MouseEvent evt) {
        if (evt == null || winInitSize == null || dragInitPoint == null) {
            return;
        }
        min = this.getMinimumSize();
        max = this.getMaximumSize();
        int newx = Math.max(winInitPoint.x + (winInitSize.width - max.width), Math.min(winInitPoint.x + (evt.getXOnScreen() - dragInitPoint.x), winInitPoint.x + (winInitSize.width - min.width)));
        int newwid = Math.min(max.width, Math.max(winInitSize.width - (evt.getXOnScreen() - dragInitPoint.x), min.width));
        this.setBounds(newx, winInitPoint.y, newwid, winInitSize.height);
    }

    private void WMousePressed(java.awt.event.MouseEvent evt) {
        initializeWindowDrag(evt);
    }

    private void NWMouseDragged(java.awt.event.MouseEvent evt) {
        if (evt == null || winInitSize == null || dragInitPoint == null) {
            return;
        }
        min = this.getMinimumSize();
        max = this.getMaximumSize();
        int newx = Math.max(winInitPoint.x + (winInitSize.width - max.width), Math.min(winInitPoint.x + (evt.getXOnScreen() - dragInitPoint.x), winInitPoint.x + (winInitSize.width - min.width)));
        int newy = Math.max(Math.min(winInitPoint.y + (evt.getYOnScreen() - dragInitPoint.y), winInitPoint.y + (winInitSize.height - min.height)), winInitPoint.y + (winInitSize.height - max.height));
        int newwid = Math.min(max.width, Math.max(winInitSize.width - (evt.getXOnScreen() - dragInitPoint.x), min.width));
        int newheight = Math.min(max.height, Math.max(winInitSize.height - (evt.getYOnScreen() - dragInitPoint.y), min.height));
        this.setBounds(newx, newy, newwid, newheight);
    }

    private void NWMousePressed(java.awt.event.MouseEvent evt) {
        initializeWindowDrag(evt);
    }

    private void NEMouseDragged(java.awt.event.MouseEvent evt) {
        if (evt == null || winInitSize == null || dragInitPoint == null) {
            return;
        }
        min = this.getMinimumSize();
        max = this.getMaximumSize();
        int newheight = Math.min(max.height, Math.max(winInitSize.height - (evt.getYOnScreen() - dragInitPoint.y), min.height));
        int newy = Math.max(Math.min(winInitPoint.y + (evt.getYOnScreen() - dragInitPoint.y), winInitPoint.y + (winInitSize.height - min.height)), winInitPoint.y + (winInitSize.height - max.height));
        int newwid = Math.min(max.width, Math.max(winInitSize.width + (evt.getXOnScreen() - dragInitPoint.x), min.width));
        Rectangle r = new Rectangle(winInitPoint.x, newy, newwid, newheight);
        this.setBounds(r);
    }

    private void NEMousePressed(java.awt.event.MouseEvent evt) {
        initializeWindowDrag(evt);
    }

    private void SEMouseDragged(java.awt.event.MouseEvent evt) {
        if (evt == null || winInitSize == null || dragInitPoint == null) {
            return;
        }
        min = this.getMinimumSize();
        max = this.getMaximumSize();
        int newwid = Math.min(max.width, Math.max(winInitSize.width + (evt.getXOnScreen() - dragInitPoint.x), min.width));
        int newheight = Math.min(max.height, Math.min(winInitSize.height + (evt.getYOnScreen() - dragInitPoint.y), max.height));
        this.setSize(newwid, newheight);
    }

    private void SEMousePressed(java.awt.event.MouseEvent evt) {
        initializeWindowDrag(evt);
    }

    private void SEMouseEntered(java.awt.event.MouseEvent evt) {
    }

    private void SMouseDragged(java.awt.event.MouseEvent evt) {
        if (evt == null || winInitSize == null || dragInitPoint == null) {
            return;
        }
        min = this.getMinimumSize();
        max = this.getMaximumSize();
        int newheight = Math.min(max.height, Math.min(winInitSize.height + (evt.getYOnScreen() - dragInitPoint.y), max.height));
        this.setSize(winInitSize.width, newheight);
    }

    private void SMousePressed(java.awt.event.MouseEvent evt) {
        initializeWindowDrag(evt);
    }

    private void SMouseEntered(java.awt.event.MouseEvent evt) {
    }

    private void panMainMouseDragged(java.awt.event.MouseEvent evt) {
    }

    private void panMainMousePressed(java.awt.event.MouseEvent evt) {
    }

    private void panMainMouseEntered(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void panMainMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void jLabel2MouseReleased(java.awt.event.MouseEvent evt) {
        if (this.getDefaultCloseOperation() == JFrame.EXIT_ON_CLOSE) {
            System.exit(0);
        } else {
            this.setVisible(false);
        }
    }

    private void jLabel2MouseExited(java.awt.event.MouseEvent evt) {
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/btnCloseDlg.png")));
        jLabel2.repaint();
    }

    private void jLabel2MouseEntered(java.awt.event.MouseEvent evt) {
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/btnCloseDlgHL.png")));
        jLabel2.repaint();
    }

    private void initializeWindowDrag(java.awt.event.MouseEvent evt) {
        winInitSize = this.getSize();
        winInitPoint = this.getLocationOnScreen();
        dragInitPoint = evt.getLocationOnScreen();
    }

    @Override
    public void setTitle(String title) {
        super.setTitle(title);
        jLabel3.setText(title);
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify
    private javax.swing.JPanel E;
    private javax.swing.JPanel N;
    private javax.swing.JPanel NE;
    private javax.swing.JPanel NW;
    private javax.swing.JPanel S;
    private javax.swing.JPanel SE;
    private javax.swing.JPanel SW;
    private javax.swing.JPanel W;
    private samusik.glasscmp.GlassPanel panBackground;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel panMain;
    // End of variables declaration
}
